# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import order_pb2 as order__pb2


class OrderStub(object):
    """The stock market service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Trade = channel.unary_unary(
                '/order.Order/Trade',
                request_serializer=order__pb2.TradeDetails.SerializeToString,
                response_deserializer=order__pb2.ResponseMessage.FromString,
                )
        self.GetOrder = channel.unary_unary(
                '/order.Order/GetOrder',
                request_serializer=order__pb2.OrderNumber.SerializeToString,
                response_deserializer=order__pb2.OrderDetails.FromString,
                )
        self.Ping = channel.unary_unary(
                '/order.Order/Ping',
                request_serializer=order__pb2.LiveCheck.SerializeToString,
                response_deserializer=order__pb2.Success.FromString,
                )
        self.SetLeader = channel.unary_unary(
                '/order.Order/SetLeader',
                request_serializer=order__pb2.LeaderDetails.SerializeToString,
                response_deserializer=order__pb2.Success.FromString,
                )
        self.PropagateOrder = channel.unary_unary(
                '/order.Order/PropagateOrder',
                request_serializer=order__pb2.OrderDetails.SerializeToString,
                response_deserializer=order__pb2.Success.FromString,
                )
        self.FetchNewOrders = channel.unary_unary(
                '/order.Order/FetchNewOrders',
                request_serializer=order__pb2.OrderNumber.SerializeToString,
                response_deserializer=order__pb2.NewOrders.FromString,
                )


class OrderServicer(object):
    """The stock market service definition.
    """

    def Trade(self, request, context):
        """Makes a trade
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PropagateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchNewOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Trade': grpc.unary_unary_rpc_method_handler(
                    servicer.Trade,
                    request_deserializer=order__pb2.TradeDetails.FromString,
                    response_serializer=order__pb2.ResponseMessage.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=order__pb2.OrderNumber.FromString,
                    response_serializer=order__pb2.OrderDetails.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=order__pb2.LiveCheck.FromString,
                    response_serializer=order__pb2.Success.SerializeToString,
            ),
            'SetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLeader,
                    request_deserializer=order__pb2.LeaderDetails.FromString,
                    response_serializer=order__pb2.Success.SerializeToString,
            ),
            'PropagateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PropagateOrder,
                    request_deserializer=order__pb2.OrderDetails.FromString,
                    response_serializer=order__pb2.Success.SerializeToString,
            ),
            'FetchNewOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchNewOrders,
                    request_deserializer=order__pb2.OrderNumber.FromString,
                    response_serializer=order__pb2.NewOrders.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order.Order', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Order(object):
    """The stock market service definition.
    """

    @staticmethod
    def Trade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/Trade',
            order__pb2.TradeDetails.SerializeToString,
            order__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/GetOrder',
            order__pb2.OrderNumber.SerializeToString,
            order__pb2.OrderDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/Ping',
            order__pb2.LiveCheck.SerializeToString,
            order__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/SetLeader',
            order__pb2.LeaderDetails.SerializeToString,
            order__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PropagateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/PropagateOrder',
            order__pb2.OrderDetails.SerializeToString,
            order__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchNewOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/order.Order/FetchNewOrders',
            order__pb2.OrderNumber.SerializeToString,
            order__pb2.NewOrders.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
